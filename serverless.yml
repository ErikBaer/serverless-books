service:
  name: serverless-books-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    BOOKS_TABLE: books-${self:provider.stage}
    COVER_S3_BUCKET: sls-baer-books-cover-${self:provider.stage}
    urlExpiration: 3600
    INDEX_NAME: TOPIC_INDEX

  tracing:
    lambda: true
    apiGateway: true


custom:

  serverless-offline:
    port: 3003

  

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      inMemory: true
      migrate: true 


functions:

 

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

 
  GetBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: books
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "*"

  
  CreateBook:
    handler: src/lambda/http/createBook.handler
    events:
      - http:
          method: post
          path: books
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/create-book-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "*"
    

  
  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    events:
      - http:
          method: patch
          path: books/{bookId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/update-book-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: "*"
  
  DeleteBook :
    handler: src/lambda/http/deleteBook.handler
    events:
      - http:
          method: delete
          path: books/{bookId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: "*"

  
  # UploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: books/{bookId}/attachment
  #         cors: true
  #         authorizer: Auth
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - s3:PutObject
  #         - s3:GetObject
  #       Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:UpdateItem
  #       Resource: "*"
      
  

resources:
  Resources:
   

    BooksDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: topic
            AttributeType: S
          
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOKS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: topic
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CoverBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.COVER_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.COVER_S3_BUCKET}/*'
        Bucket: !Ref CoverBucket
    